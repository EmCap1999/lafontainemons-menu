import type { DrizzleDatabase } from '@lafontaine/database/db';
import * as schema from '@lafontaine/database/src/schema';
export * as itemCommand from './item';
export declare function selectAll(db: DrizzleDatabase): Promise<{
    sectionId: number;
    name: string;
    displayOrder: number;
    createdAt: Date | null;
    updatedAt: Date | null;
    description: string | null;
    subsectionId: number | null;
    itemId: number;
    price: string;
    capacity: number | null;
    unit: string | null;
    origin: string | null;
    isAvailable: boolean;
}[]>;
export declare function selectById(db: DrizzleDatabase, itemId: number): Promise<schema.ItemSelect | undefined>;
export declare function selectBySection(db: DrizzleDatabase, sectionId: number): Promise<{
    sectionId: number;
    name: string;
    displayOrder: number;
    createdAt: Date | null;
    updatedAt: Date | null;
    description: string | null;
    subsectionId: number | null;
    itemId: number;
    price: string;
    capacity: number | null;
    unit: string | null;
    origin: string | null;
    isAvailable: boolean;
}[]>;
export declare function selectBySubsection(db: DrizzleDatabase, subsectionId: number): Promise<{
    sectionId: number;
    name: string;
    displayOrder: number;
    createdAt: Date | null;
    updatedAt: Date | null;
    description: string | null;
    subsectionId: number | null;
    itemId: number;
    price: string;
    capacity: number | null;
    unit: string | null;
    origin: string | null;
    isAvailable: boolean;
}[]>;
export declare function selectBySectionWithoutSubsection(db: DrizzleDatabase, sectionId: number): Promise<{
    sectionId: number;
    name: string;
    displayOrder: number;
    createdAt: Date | null;
    updatedAt: Date | null;
    description: string | null;
    subsectionId: number | null;
    itemId: number;
    price: string;
    capacity: number | null;
    unit: string | null;
    origin: string | null;
    isAvailable: boolean;
}[]>;
export declare function selectWithRelations(db: DrizzleDatabase, itemId: number): Promise<{
    sectionId: number;
    name: string;
    displayOrder: number;
    createdAt: Date | null;
    updatedAt: Date | null;
    description: string | null;
    subsectionId: number | null;
    itemId: number;
    price: string;
    capacity: number | null;
    unit: string | null;
    origin: string | null;
    isAvailable: boolean;
    section: {
        sectionId: number;
        name: string;
        displayOrder: number;
        createdAt: Date | null;
        updatedAt: Date | null;
    };
    subsection: {
        sectionId: number;
        name: string;
        displayOrder: number;
        createdAt: Date | null;
        updatedAt: Date | null;
        subsectionId: number;
    } | null;
} | undefined>;
export declare function selectAvailable(db: DrizzleDatabase): Promise<{
    sectionId: number;
    name: string;
    displayOrder: number;
    createdAt: Date | null;
    updatedAt: Date | null;
    description: string | null;
    subsectionId: number | null;
    itemId: number;
    price: string;
    capacity: number | null;
    unit: string | null;
    origin: string | null;
    isAvailable: boolean;
}[]>;
export declare function selectAvailableBySection(db: DrizzleDatabase, sectionId: number): Promise<{
    sectionId: number;
    name: string;
    displayOrder: number;
    createdAt: Date | null;
    updatedAt: Date | null;
    description: string | null;
    subsectionId: number | null;
    itemId: number;
    price: string;
    capacity: number | null;
    unit: string | null;
    origin: string | null;
    isAvailable: boolean;
}[]>;
export declare function insert(db: DrizzleDatabase, item: schema.ItemInsert): Promise<{
    sectionId: number;
    name: string;
    displayOrder: number;
    createdAt: Date | null;
    updatedAt: Date | null;
    description: string | null;
    subsectionId: number | null;
    itemId: number;
    price: string;
    capacity: number | null;
    unit: string | null;
    origin: string | null;
    isAvailable: boolean;
}[]>;
export declare function update(db: DrizzleDatabase, itemId: number, item: Partial<Omit<schema.ItemInsert, 'itemId'>>): Promise<{
    sectionId: number;
    name: string;
    displayOrder: number;
    createdAt: Date | null;
    updatedAt: Date | null;
    description: string | null;
    subsectionId: number | null;
    itemId: number;
    price: string;
    capacity: number | null;
    unit: string | null;
    origin: string | null;
    isAvailable: boolean;
}[]>;
export declare function updateAvailability(db: DrizzleDatabase, itemId: number, isAvailable: boolean): Promise<{
    sectionId: number;
    name: string;
    displayOrder: number;
    createdAt: Date | null;
    updatedAt: Date | null;
    description: string | null;
    subsectionId: number | null;
    itemId: number;
    price: string;
    capacity: number | null;
    unit: string | null;
    origin: string | null;
    isAvailable: boolean;
}[]>;
export declare function remove(db: DrizzleDatabase, itemId: number): Promise<{
    sectionId: number;
    name: string;
    displayOrder: number;
    createdAt: Date | null;
    updatedAt: Date | null;
    description: string | null;
    subsectionId: number | null;
    itemId: number;
    price: string;
    capacity: number | null;
    unit: string | null;
    origin: string | null;
    isAvailable: boolean;
}[]>;
export declare function countBySection(db: DrizzleDatabase, sectionId: number): Promise<number>;
export declare function countAvailable(db: DrizzleDatabase): Promise<number>;
//# sourceMappingURL=item.d.ts.map