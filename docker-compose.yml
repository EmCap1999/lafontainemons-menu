services:
  postgres:
    image: postgres:17
    container_name: lafontaine-postgres-dev
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - lafontaine-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  drizzle-migration:
    image: node:22-alpine
    container_name: lafontaine-drizzle-migration
    working_dir: /app
    volumes:
      - ./:/app
    environment:
      - NODE_ENV=development
      - DATABASE_URL=${DATABASE_URL}
      - FRONTEND_URL=https://carte.lafontainemons.be
      - BACKEND_PORT=3001
      - HUSKY=0
    command: sh -c "npm ci --ignore-scripts && npm run build --workspace=database && npm run db:migrate --workspace=database"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - lafontaine-network

  seeder:
    image: node:22-alpine
    container_name: lafontaine-seeder
    working_dir: /app
    volumes:
      - ./:/app
    environment:
      - NODE_ENV=development
      - DATABASE_URL=${DATABASE_URL}
      - HUSKY=0
    command: sh -c "npm ci --ignore-scripts && npm run build --workspace=database && npm run db:seed --workspace=database"
    depends_on:
      drizzle-migration:
        condition: service_completed_successfully
    networks:
      - lafontaine-network

  backend:
    image: node:22-alpine
    container_name: lafontaine-backend-dev
    restart: always
    working_dir: /app
    volumes:
      - ./:/app
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${DATABASE_URL}
      - FRONTEND_URL=${FRONTEND_URL}
      - BACKEND_PORT=${BACKEND_PORT}
      - HUSKY=0
    ports:
      - "${BACKEND_PORT}:3001"
    command: sh -c "cd backend && npm install --ignore-scripts && npm start"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - lafontaine-network
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001" ]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  lafontaine-network:
    driver: bridge

volumes:
  postgres_data: